h2. Spring Expression Language (SpEL)

Camel allows "SpEL":http://static.springsource.org/spring/docs/current/spring-framework-reference/htmlsingle/spring-framework-reference.html#expressions to be used as an [Expression] or [Predicate] in the [DSL] or [Xml Configuration].

h3. Variables

The following variables are available in expressions and predicates written in SpEL:

| Variable | Type | Description |
| *this* | Exchange | the Exchange is the root object |
| exchange | Exchange | the Exchange object |
| exception | Throwable | the Exchange exception (if any) |
| exchangeId | String | the exchange id |
| fault | Message | the Fault message (if any) |
| request | Message | the exchange.in message |
| response | Message | the exchange.out message (if any) |
| properties | Map | the exchange properties |
| property(name) | Object | the property by the given name |
| property(name, type) | Type | the property by the given name as the given type |

h3. Samples

h4. Expression templating

SpEL expressions need to be surrounded by @#{@ @}@ delimiters since "expression templating":http://static.springsource.org/spring/docs/current/spring-framework-reference/htmlsingle/spring-framework-reference.html#d0e12128 is enabled. This allows you to combine SpEL expressions with regular text and use this as extremely lightweight template language. 

For example if you construct the following route:
<code>
from("direct:example").setBody(spel("Hello #{request.body}! 
What a beautiful #{request.headers['dayOrNight']}")).to("mock:result");
</code>

And sent a message with the string "World" in the body, and a header "dayOrNight" with value "day":
<code>
template.sendBodyAndHeader("direct:example", "World", "dayOrNight", "day");
</code>

The output on @mock:result@ will be _"Hello World! What a beautiful day"_

h4. Bean integration

You can reference beans defined in the [Registry] (most likely an @ApplicationContext@) in your SpEL expressions. For example if you have a bean named "foo" in your @ApplicationContext@ you can invoke the "bar" method on this bean like this: @#{@foo.bar == 'xyz'}@.

h4. SpEL in enterprise integration patterns

You can use SpEL as an expression for [Recipient List] or as a predicate inside a [Message Filter]:

<pre>
<route>
  <from uri="direct:foo"/>
  <filter>
    <spel>#{request.headers['foo'] == 'bar'}</spel>
    <to uri="direct:bar"/>
  </filter>
</route>
</pre>

And the equivalent in Java DSL:

<code>
   from("direct:foo").filter().spel("#{request.headers['foo'] == 'bar'}").to("direct:bar");
</code>

h3. Dependencies
 
You need Spring 3.0 or higher to use Spring Expression Language. If you use Maven you could just add the following to your @pom.xml@:

<pre>
<dependency>
  <groupId>org.apache.camel</groupId>
  <artifactId>camel-spring-expression</artifactId>
  <version>xxx</version>
  <!-- use the same version as your Camel core version -->
</dependency>
</pre>
