h1. Spring Expression Language (SpEL)

Camel allows "SpEL":http://static.springsource.org/spring/docs/current/spring-framework-reference/htmlsingle/spring-framework-reference.html#expressions to be used as an [Expression] or [Predicate] the [DSL] or [Xml Configuration].

You could use SpEL to create an [Predicate] in a [Message Filter] or as an [Expression] for a [Recipient List]

You can use SpEL dot notation to invoke operations. If you for instance have a body that contains a POJO that has a @getFamiliyName@ method then you can construct the syntax as follows:
<code>
"request.body.familyName"
   // or 
"getRequest().getBody().getFamilyName()"
</code>

h3. Variables

|| Variable || Type || Description ||
| *this* | Exchange | the Exchange is the root object |
| exchange | Exchange | the Exchange object |
| exception | Throwable | the Exchange exception (if any) |
| exchangeId | String | the exchange id |
| fault | Message | the Fault message (if any) |
| request | Message | the exchange.in message |
| response | Message | the exchange.out message (if any) |
| properties | Map | the exchange properties |
| property(name) | Object | the property by the given name |
| property(name, type) | Type | the property by the given name as the given type |

h3. Samples
For example you could use SpEL inside a [Message Filter] in XML

<pre>
<route>
  <from uri="direct:foo"/>
  <filter>
    <spel>request.headers['foo'] == 'bar'</spel>
    <to uri="direct:bar"/>
  </filter>
</route>
</pre>

And the sample using Java DSL:
<code>
   from("direct:foo").filter().spel("request.headers['foo'] == 'bar'").to("direct:bar");
</code>

h3. Dependencies
 
You need Spring 3.0 or higher to use Spring Expression Language.
If you use Maven you could just add the following to your {{pom.xml}}:

<pre>
<dependency>
  <groupId>org.apache.camel</groupId>
  <artifactId>camel-spring-expression</artifactId>
  <version>xxx</version>
  <!-- use the same version as your Camel core version -->
</dependency>
</pre>

